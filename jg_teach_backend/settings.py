"""
Django settings for jg_teach_backend project.

Generated by 'django-admin startproject' using Django 5.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
from whitenoise.middleware import WhiteNoiseMiddleware

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Usa una variable de entorno para la SECRET_KEY.
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-bd2-n*)p&7_1!y58!8&3klbp%d$_zit#z^cg-^szu(*mwmd5h+')

# SECURITY WARNING: don't run with debug turned on in production!
# Usa una variable de entorno para controlar el modo DEBUG.
# En Render, se debe establecer a False en producción.
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

# Ajustamos ALLOWED_HOSTS para que funcione en Render.
# Debes establecer la variable de entorno ALLOWED_HOSTS en Render.
if not DEBUG:
    # La URL de tu app en Render. Debes cambiar 'your-render-app-name'
    # a la URL que Render te asignó, por ejemplo:
    # ALLOWED_HOSTS = ['jimenagarciateach.onrender.com']
    ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').split(',') if os.environ.get('ALLOWED_HOSTS') else []
else:
    # En desarrollo, permitimos todas las hosts.
    ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'users',
    'courses',
    'evaluations',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Para servir archivos estáticos comprimidos en producción.
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Ajustamos CORS_ALLOWED_ORIGINS para incluir la URL de Render.
# Recuerda que Render asigna una URL diferente a cada app.
# Asegúrate de reemplazar 'jimenazgarciateach.onrender.com' con la URL de tu app.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://jimenezgarciateach.firebaseapp.com",
    "https://jimenagarciateach.onrender.com" # Agrega aquí la URL de tu app de Render
]

CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'jg_teach_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'jg_teach_backend.wsgi.application'

# Configuración de la base de datos para producción.
# Render asigna una variable de entorno `DATABASE_URL`.
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL', 'postgresql://postgres:W198515w@localhost:5432/jg_teach_db'),
        conn_max_age=600 # Opcional: para reusar conexiones a la base de datos
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# Configuración para servir archivos estáticos con Whitenoise en producción.
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
